--- src/collectors/elasticsearch/elasticsearch.py	2013-01-11 18:40:37.000000000 +0000
+++ src/collectors/elasticsearch/elasticsearch.py	2013-05-31 17:38:53.000000000 +0000
@@ -84,16 +84,17 @@
         metrics['transport.tx.count'] = transport['tx_count']
         metrics['transport.tx.size'] = transport['tx_size_in_bytes']
 
-        cache = indices['cache']
-        if 'bloom_size_in_bytes' in cache:
-            metrics['cache.bloom.size'] = cache['bloom_size_in_bytes']
-        metrics['cache.field.evictions'] = cache['field_evictions']
-        metrics['cache.field.size'] = cache['field_size_in_bytes']
-        metrics['cache.filter.count'] = cache['filter_count']
-        metrics['cache.filter.evictions'] = cache['filter_evictions']
-        metrics['cache.filter.size'] = cache['filter_size_in_bytes']
-        if 'id_cache_size_in_bytes' in cache:
-            metrics['cache.id.size'] = cache['id_cache_size_in_bytes']
+        cache = indices.get('cache')
+        if cache:
+            if 'bloom_size_in_bytes' in cache:
+                metrics['cache.bloom.size'] = cache['bloom_size_in_bytes']
+            metrics['cache.field.evictions'] = cache['field_evictions']
+            metrics['cache.field.size'] = cache['field_size_in_bytes']
+            metrics['cache.filter.count'] = cache['filter_count']
+            metrics['cache.filter.evictions'] = cache['filter_evictions']
+            metrics['cache.filter.size'] = cache['filter_size_in_bytes']
+            if 'id_cache_size_in_bytes' in cache:
+                metrics['cache.id.size'] = cache['id_cache_size_in_bytes']
 
         #
         # process mem/cpu
@@ -106,11 +107,12 @@
 
         #
         # filesystem
-        fs_data = data['fs']['data'][0]
-        metrics['disk.reads.count'] = fs_data['disk_reads']
-        metrics['disk.reads.size'] = fs_data['disk_read_size_in_bytes']
-        metrics['disk.writes.count'] = fs_data['disk_writes']
-        metrics['disk.writes.size'] = fs_data['disk_write_size_in_bytes']
+        if data['fs']['data']:
+            fs_data = data['fs']['data'][0]
+            metrics['disk.reads.count'] = fs_data['disk_reads']
+            metrics['disk.reads.size'] = fs_data['disk_read_size_in_bytes']
+            metrics['disk.writes.count'] = fs_data['disk_writes']
+            metrics['disk.writes.size'] = fs_data['disk_write_size_in_bytes']
 
         for key in metrics:
             self.publish(key, metrics[key])
