See https://github.com/wtforms/wtforms/pull/98

diff --git a/tests/form.py b/tests/form.py
index d7204b0..3c0df6d 100644
--- a/tests/form.py
+++ b/tests/form.py
@@ -245,3 +245,10 @@ def test_missing_diamond(self):
             self.G.Meta,
             DefaultMeta
         ))
+
+    def test_meta_field(self):
+        class F(Form):
+            meta = TextField()
+        f = F()
+        assert isinstance(f.meta, TextField)
+        assert isinstance(f._meta, F.Meta)
diff --git a/wtforms/form.py b/wtforms/form.py
index ff8dc57..27b2cef 100644
--- a/wtforms/form.py
+++ b/wtforms/form.py
@@ -33,7 +33,7 @@ def __init__(self, fields, prefix='', meta=DefaultMeta()):
         if prefix and prefix[-1] not in '-_;:/.':
             prefix += '-'
 
-        self.meta = meta
+        self._meta = meta
         self._prefix = prefix
         self._errors = None
         self._fields = OrderedDict()
@@ -82,7 +82,7 @@ def _get_translations(self):
 
         Must return an object that provides gettext() and ngettext() methods.
         """
-        return self.meta.get_translations(self)
+        return self._meta.get_translations(self)
 
     def populate_obj(self, obj):
         """
@@ -116,7 +116,7 @@ def process(self, formdata=None, obj=None, data=None, **kwargs):
             an attribute named the same as a field, form will assign the value
             of a matching keyword argument to the field, if one exists.
         """
-        formdata = self.meta.wrap_formdata(self, formdata)
+        formdata = self._meta.wrap_formdata(self, formdata)
 
         if data is not None:
             # XXX we want to eventually process 'data' as a new entity.
@@ -153,6 +153,12 @@ def validate(self, extra_validators=None):
                 success = False
         return success
 
+    # Expose _meta as "meta", keeping _meta private so that a form field called "meta"
+    # doesn't break internal functionality.
+    @property
+    def meta(self):
+        return self._meta
+
     @property
     def data(self):
         return dict((name, f.data) for name, f in iteritems(self._fields))
